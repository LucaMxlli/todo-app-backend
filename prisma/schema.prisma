generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model FeeType {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  investmentTypes InvestmentType[]
  fees            Fees[]
}

model Fees {
  amount    BigInt
  validFrom DateTime @default(now())
  feeTypeId Int
  feeType   FeeType  @relation(fields: [feeTypeId], references: [id])

  @@id([amount, validFrom, feeTypeId])
}

model PlatformType {
  id    Int            @id @default(autoincrement())
  name  String         @unique
  links PlatformLink[]
}

model PlatformLink {
  platformTypeId Int
  link           String
  coinId         Int
  coin           Coin         @relation(fields: [coinId], references: [id])
  platformType   PlatformType @relation(fields: [platformTypeId], references: [id])

  @@id([platformTypeId, coinId])
}

model CoinState {
  id            Int                @id @default(autoincrement())
  name          String             @unique
  currentStates CoinCurrentState[]
}

model TokenomicsType {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  Tokenomics Tokenomics[]
}

model Tokenomics {
  tokenomicsTypeId Int
  coinId           Int
  value            Decimal
  coin             Coin           @relation(fields: [coinId], references: [id])
  tokenomicsType   TokenomicsType @relation(fields: [tokenomicsTypeId], references: [id])

  @@id([coinId, tokenomicsTypeId])
}

model Coin {
  id             Int                @id @default(autoincrement())
  name           String
  symbolName     String
  symbolImage    String
  bannerImage    String
  description    String
  holdDuration   Int                @default(2)
  totalRaise     BigInt             @default(100000000000)
  type           String             @default("fair-launch")
  minInvestment  Decimal            @default(0.01)
  maxInvestment  Decimal            @default(0.1)
  totalSupply    Decimal            @default(1000000000)
  decimals       Int                @default(9)
  userId         Int
  createdAt      DateTime           @default(now())
  tradeLink      String?
  chartLink      String?
  contactAddress String?
  unsoldTokens   String?            @default("burn")
  user           User               @relation(fields: [userId], references: [id])
  currentState   CoinCurrentState[]
  investments    Investment[]
  platformLinks  PlatformLink[]
  featured       FeaturedCoin[]
  Tokenomics     Tokenomics[]
}

model CoinCurrentState {
  coinId    Int
  stateId   Int
  validFrom DateTime  @default(now())
  coin      Coin      @relation(fields: [coinId], references: [id])
  state     CoinState @relation(fields: [stateId], references: [id])

  @@id([coinId, stateId, validFrom])
}

model FeaturedCoin {
  coinId    Int
  validFrom DateTime @default(now())
  coin      Coin     @relation(fields: [coinId], references: [id])

  @@id([coinId, validFrom])
}

model BalanceTransaction {
  id            Int                    @id @default(autoincrement())
  transacted_at DateTime               @default(now())
  typeId        Int
  value         Decimal                @default(0)
  userId        Int
  approved      Boolean                @default(false)
  user          User                   @relation(fields: [userId], references: [id])
  type          BalanceTransactionType @relation(fields: [typeId], references: [id])
}

model BalanceTransactionType {
  id           Int                  @id @default(autoincrement())
  name         String               @unique
  transactions BalanceTransaction[]
}

model InvestmentState {
  id            Int                      @id @default(autoincrement())
  name          String                   @unique
  currentStates InvestmentCurrentState[]
}

model InvestmentCurrentState {
  coinId            Int
  userId            Int
  placedAt          DateTime
  validFrom         DateTime        @default(now())
  investmentStateId Int
  investment        Investment      @relation(fields: [coinId, userId, placedAt], references: [coinId, userId, placedAt])
  state             InvestmentState @relation(fields: [investmentStateId], references: [id])

  @@id([coinId, userId, placedAt, validFrom, investmentStateId])
}

model InvestmentType {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  feeId       Int?
  fee         FeeType?     @relation(fields: [feeId], references: [id])
  investments Investment[]
}

model Investment {
  coinId           Int
  userId           Int
  placedAt         DateTime                 @default(now())
  amount           BigInt
  signature        String                   @unique
  isApproved       Boolean                  @default(false)
  investmentTypeId Int
  investmentType   InvestmentType           @relation(fields: [investmentTypeId], references: [id])
  coin             Coin                     @relation(fields: [coinId], references: [id])
  user             User                     @relation(fields: [userId], references: [id])
  currentState     InvestmentCurrentState[]

  @@id([coinId, userId, placedAt])
}

model User {
  id                 Int                  @id @default(autoincrement())
  isPrivileged       Boolean              @default(false)
  walletAddress      String?              @unique
  balanceTransaction BalanceTransaction[]
  coin               Coin[]
  Investment         Investment[]
}
